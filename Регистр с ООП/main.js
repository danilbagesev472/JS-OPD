
class User {
  constructor(name, password) {
  this.name = name;
  this.password = password;
  }
  
  register() {
  if (!this.isnameExist()) {
  const users = this.getUsers();
  users.push({ name: this.name, password: this.password });
  localStorage.setItem('users', JSON.stringify(users));
  return true;
  }
  return false;
  }
  
  login() {
  const users = this.getUsers();
  const currentUser = users.find((user) => user.name === this.name && user.password === this.password)
  if (currentUser) {
  localStorage.setItem('currentUser', this.name);
  return true;
  }
  return false;
  }

  getUsers() {
    return JSON.parse(localStorage.getItem('users')) || [];
    } 

  isnameExist() {
  const users = this.getUsers();
  return users.some((user) => user.name === this.name);
  }
  }
  
  
  const newUser = new User(document.getElementById('username').value, document.getElementById('password').value);
  if (newUser.register()) {
  console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
  } else {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }
  
  const loginUser = new User(document.getElementById('username').value, document.getElementById('password').value);
  if (loginUser.login()) {
  console.log('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } else {
  console.log('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
  }

  function Register(){
    const newUser = new User(document.getElementById('username').value, document.getElementById('password').value);
  if (newUser.register()) {
  console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
  } else {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }
}

function Login(){
  const loginUser = new User(document.getElementById('username').value, document.getElementById('password').value);
  if (loginUser.login()) {
  console.log('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } else {
  console.log('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
  }
}


//       .some
// const food = ['üçó' , 'üçñ', 'ü•ì', 'üçî', 'üåØ', 'üßÜ']

//   function isPizza(item) {
//     return item === 'üçï' //false
//   }

//   function isBurger(item) {
//     return item === 'üçî' //true
//   }



//        .find
// const products = [1, 2, 3, 4, 5, 6, 7, 8, 5]

// const first5 = products.find((element) => element === 5) 

//      –ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ find() –≤–µ—Ä–Ω—ë—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤ –º–∞—Å—Å–∏–≤–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç 
//      –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–ª–±—ç–∫-—Ñ—É–Ω–∫—Ü–∏–∏. –ï—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ 
//      —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ undefined